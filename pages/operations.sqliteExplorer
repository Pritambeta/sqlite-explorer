{% extends "viewlayout.sqliteExplorer" %}
{% block view %}
<nav class="data-navbar">
    <ul>
        <a href="/browse?table={{ selected_table }}">
            <li>Browse</li>
        </a>
        <a href="/structure?table={{ selected_table }}">
            <li>Structure</li>
        </a>
        <a href="/insert?table={{ selected_table }}">
            <li>Insert</li>
        </a>
        <a href="/operations?table={{ selected_table }}" class="active">
            <li>Operations</li>
        </a>
    </ul>
</nav>
<style>
    .operations-card {
        max-width: 100%;
        width: 100%;
        padding: 20px;
        background: #fbfbfb;
        border-radius: 4px;
        margin: auto;
    }
    .operations-card-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .operations-card-column-3 {
        flex: 60%;
        max-width: 60%;
        margin-right: 10px;
    }
    .operations-card-column-1 {
        flex: 40%;
        max-width: 40%;
        margin-left: 10px;
        display: flex;
        flex-direction: column;
    }
    .input {
        width: 100%;
        box-shadow: none;
        padding: 8px;
        outline: solid 2px transparent;
        transition: 0.2s;
    }
    .input:focus {
        box-shadow: none;
        transform: none;
        outline: solid 2px #eee;
    }
    .operation-rename-btn {
        margin-top: 10px;
    }
    .operation-red-text {
        color: rgb(255, 0, 36);
        text-decoration: none;
        display: block;
        margin-bottom: 6px;
        text-align: center;
        cursor: pointer;
    }
    .operation-red-text:hover {
        text-decoration: underline;
    }
</style>
<div class="operations-card">
    <div class="operations-card-row">
        <div class="operations-card-column-3">
            <input type="text" class="input" id="get_table_name" value="{{ selected_table }}" placeholder="Table Name">
            <button class="btn operation-rename-btn" id="renameButton">Rename</button>
        </div>
        <div class="operations-card-column-1">
            <p href="#" class="operation-red-text" id="empty-table">Empty The Table</p>
            <p href="#" class="operation-red-text" id="delete-table">Delete The Table</p>
        </div>
    </div>
</div>
<script>
    function _id(elm) {
        return document.getElementById(elm);
    }
    _id("empty-table").addEventListener("click", (e)=> {
        let randomNumber = Math.floor(Math.random() * (9999 - 1000)) + 1000;
        if (prompt(`Enter ${randomNumber} to empty the table`) == randomNumber) {
            const formData = new FormData();
            formData.append("table", `{{ selected_table }}`);
            fetch("/~empty-table", {
                method: "POST",
                body: formData
            }).then(response=>response.json()).then(data=>{
                if (data.status == "success") {
                    showAlert("{{ selected_table }} has been blanked successfully", "green");
                }
                else {
                    showAlert("Error: The server is facing some internal issues", "red");
                }
            }).catch(err=> {
                if (err) {
                    showAlert("Error: The server is facing some internal issues", "red");
                }
            })
        }
    })
    _id("delete-table").addEventListener("click", (e)=> {
        let randomNumber = Math.floor(Math.random() * (9999 - 1000)) + 1000;
        if (prompt(`Enter ${randomNumber} to delete the table`) == randomNumber) {
            const formData = new FormData();
            formData.append("table", `{{ selected_table }}`);
            fetch("/~delete-table", {
                method: "POST",
                body: formData
            }).then(response=>response.json()).then(data=>{
                if (data.status == "success") {
                    showAlert("{{ selected_table }} has been deleted successfully!", "green");
                    refreshData();
                    setTimeout(() => {
                        window.open("/", "_self").focus();
                    }, 5000);
                }
                else {
                    showAlert("Error: The server is facing some internal issues", "red");
                }
            }).catch(err=> {
                if (err) {
                    showAlert("Error: The server is facing some internal issues", "red");
                }
            })
        }
    })
    _id("renameButton").addEventListener("click", ()=> {
        let randomNumber = Math.floor(Math.random() * (9999 - 1000)) + 1000;
        if (prompt(`Enter ${randomNumber} to rename the table`) == randomNumber) {
            const formData = new FormData();
            formData.append("pre_table_name", `{{ selected_table }}`);
            let new_table_name = _id("get_table_name").value.replace(" ", "_").replace("-", "_");
            formData.append("changed_table_name", new_table_name);
            fetch("/~rename-table", {
                method: "POST",
                body: formData
            }).then(response=>response.json()).then(data=>{
                if (data.status == "success") {
                    showAlert(`{{ selected_table }} has been renamed to ${new_table_name}!`, "green");
                    refreshData();
                    setTimeout(() => {
                        window.open(`/operations?table=${new_table_name}`, "_self").focus();
                    }, 5000);
                }
                else {
                    showAlert("Error: Can't rename", "red");
                }
            }).catch(err=> {
                if (err) {
                    showAlert("Error: Can't rename", "red");
                }
            })
        }
        
    })
</script>
{% endblock %}