{% extends "viewlayout.sqliteExplorer" %}
{% block view %}
<style>
    .db-table tbody tr td:first-child {
    display: flex;
    justify-content: space-between;
    align-items: center;
}
.db-table tbody tr td:first-child span a {
    text-decoration: none;
    color: #000;
    margin-left: 3px;
    margin-right: 3px;
    cursor: pointer;
}
.db-table tbody tr td:first-child span a:hover {
    text-decoration: underline;
}
</style>
<nav class="data-navbar">
    <ul>
        <a href="/browse?table={{ selected_table }}" class="active">
            <li>Browse</li>
        </a>
        <a href="/structure?table={{ selected_table }}">
            <li>Structure</li>
        </a>
        <a href="/insert?table={{ selected_table }}">
            <li>Insert</li>
        </a>
        <a href="/operations?table={{ selected_table }}">
            <li>Operations</li>
        </a>
    </ul>
</nav>
<div class="table-container">
    <table class="db-table">
        <thead>
            <tr>
                {% if data["primary_key"] != None %}
                <th style="width: 140px;">Actions</th>
                {% endif %}
                {% for i in data["column_names"] %}
                <th>{{ i[1] }}</th>
                {% endfor %}
            </tr>
        </thead>
        <tbody id="rows">
            {% for i in data["rows"] %}
            <tr>
                {% if data["primary_key"] != None %}
                <td><input type="checkbox" data-index="{{ i[data["primary_key_index"]] }}" class="row-checkbox"><span><a href="/editrow?table={{ selected_table }}&key={{ data["primary_key"] }}&index={{ i[data["primary_key_index"]] }}">Edit</a><a onclick="deleteRow('{{ i[data["primary_key_index"]]}}', this)">Delete</a></span></td>
                {% endif %}
                {% for j in i %}
                <td>{{ (j | string).replace("<", "&#60;").replace(">", "&#62;")[0:200] }}</td>
                {% endfor %}
            </tr>
            {% endfor %}
        </tbody>
    </table>
</div>

<div class="controlls">
    <div>
        {% if not buttonDisabled %}
        <button class="btn" id="loadMoreButton">Load More</button>
        {% else %}
        <button class="btn btn-disabled" id="loadMoreButton" disabled>Disabled</button>
        {% endif %}
    </div>
    {% if data["primary_key"] != None %}
    <div>
        <button class="btn" id="checkAllButton">Check All</button>
        <button class="btn" id="deleteCheckedRowsButton">Delete</button>
    </div>
    {% endif %}
    <form id="search-form">
        <input type="text" id="query" class="input" placeholder="Search..." required>
        <button type="submit" class="btn">Search</button>
    </form>
</div>
<script>
    function _id(elm) {
        return document.getElementById(elm);
    }
    function _(selector) {
        return document.querySelectorAll(selector);
    }
    _id("loadMoreButton").addEventListener("click", (e)=> {
        e.target.innerHTML = "Loading...";
        let totalRows = _("#rows tr").length
        let formData = new FormData();
        formData.append("rows", totalRows);
        formData.append("table", "{{ selected_table }}");
        fetch("/~fetchrows", {
            method: "POST",
            body: formData
        }).then(response=>response.json()).then((data)=> {
            if (data.status == "finished") {
                e.target.innerHTML = "Finished";
                e.target.setAttribute("disabled", "true");
                e.target.classList.add("class", "btn-disabled");
            }
            data.forEach(element => {
                _id("rows").innerHTML += `
                <tr>
                {% if data["primary_key"] != None %}
                    <td><input type="checkbox" data-index="${element[{{ data["primary_key_index"] }}]}" class="row-checkbox"><span><a href="/editrow?table={{ selected_table }}&key={{ data["primary_key"] }}&index=${element[{{ data["primary_key_index"] }}]}">Edit</a><a onclick="deleteRow('${element[{{ data["primary_key_index"] }}]}', this)">Delete</a></span></td>
                {% endif %}
                {% for i in data["rows"][0] %}
                <td>${element[{{ loop.index - 1 }}].toString().replace("<", "&#60").replace(">", "&#62;").substr(0, 200) }</td>
                {% endfor %}
                </tr>
                `;
                e.target.innerHTML = "Load More";
            });
        })
    })
    {% if data["primary_key"] != None %}
    let checkedAll = false;
    _id("checkAllButton").addEventListener("click", (e)=> {
        if (!checkedAll) {
            _(".row-checkbox").forEach(element=> {
                element.checked = true;
            })
            e.target.innerHTML = "Uncheck All";
            checkedAll = true;
        }
        else {
            _(".row-checkbox").forEach(element=> {
                element.checked = false;
            })
            e.target.innerHTML = "Check All";
            checkedAll = false;
        }
    })
    {% endif %}

    _id("search-form").addEventListener("submit", (e)=> {
        e.preventDefault();
        let query = _id("query").value;
        window.open(`/browse?table={{ selected_table }}&search_query=${query}`, "_self").focus();
    })
    function deleteRow(index, element) {
        if (confirm("Do you want to delete this row?")) {
            let query = `DELETE FROM \`{{ selected_table }}\` WHERE {{ data["primary_key"] }} = '${index}'`;
            let formData = new FormData();
            formData.append("query", query);
            fetch("/~sql-executer", {
                method: "POST",
                body: formData
            }).then(response=>response.json()).then(data=>{
                if (data.status == "success") {
                    showAlert("Row deleted successfully", "green");
                    _id("rows").removeChild(element.parentNode.parentNode.parentNode);
                }
                else {
                    showAlert("Can't delete this row", "red");
                }
            }).catch(err=>{
                showAlert("Can't delete this row", "red");
            })
        }
    }

    {% if data["primary_key"] != None %}
    _id("deleteCheckedRowsButton").addEventListener("click", (e)=> {
        let indexes = "";
        let i = 0;
        let willDelete = false;
        _(".row-checkbox").forEach(element=>{
            if (element.checked) {
                willDelete = true;
                let data_index = element.getAttribute("data-index");
                let comma = ",";
                if (i == 0) {
                    comma = "";
                }
                else {
                    comma = ","
                }
                indexes += comma + data_index;
                i++;
            }
        })
        if (willDelete) {
            let sqlQuery = `DELETE FROM {{ selected_table }} WHERE \`{{ data["primary_key"] }}\` IN (${indexes})`;
            let randomNumber = Math.floor(Math.random() * (9999 - 1000)) + 1000;
            if (prompt(`Enter ${randomNumber} to delete the rows`) == randomNumber) {
                let formData = new FormData();
                formData.append("query", sqlQuery);
                fetch("/~sql-executer", {
                    method: "POST",
                    body: formData
                }).then(response=>response.json()).then(data=>{
                    if (data.status == "success") {
                    showAlert("Selected rows has been deleted successfully", "green");
                    setTimeout(() => {
                        location.reload();
                    }, 5000);
                    }
                    else {
                        showAlert("Error: Can't delete the rows", "red");
                    }
                }).catch(err=>{
                    showAlert("Error: Can't delete the rows", "red");
                })
            }
        }
    })
    {% endif %}

</script>
{% endblock %}