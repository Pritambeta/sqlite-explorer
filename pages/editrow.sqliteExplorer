{% extends "viewlayout.sqliteExplorer" %}
{% block view %}
<style>
    .input {
        width: 100%;
        margin-right: 10px;
        box-shadow: none !important;
        outline: solid 2px transparent;
        resize: vertical;
        transition: outline 0.2s;
    }

    .input:focus {
        box-shadow: none;
        transform: none;
        outline: solid 2px #eee;
    }

    .input {
        font-size: 14px;
    }

    textarea {
        font-family: monospace;
    }

    .btnInsert {
        margin-top: 12px;
        margin-bottom: 12px;
    }
</style>
<nav class="data-navbar">
    <ul>
        <a href="/browse?table={{ selected_table }}">
            <li>Browse</li>
        </a>
        <a href="/structure?table={{ selected_table }}">
            <li>Structure</li>
        </a>
        <a href="/insert?table={{ selected_table }}">
            <li>Insert</li>
        </a>
        <a href="/operations?table={{ selected_table }}">
            <li>Operations</li>
        </a>
    </ul>
</nav>

<div class="table-container">
    <form id="data-inserter-form">
        <table class="db-table">
            <thead>
                <tr>
                    <th style="width: 140px;">Column</th>
                    <th style="width: 140px;">Type</th>
                    <th>Value</th>
                </tr>
            </thead>
            <tbody>
                {% for i in table_data %}
                <tr class="get_column_data">
                    <td class="get_column_name">{{ i[1] }}</td>
                    <td class="get_column_type" data-primarykey="{{ i[5] }}">{{ i[2] }}</td>
                    <td>
                        {% if i[2] in ["TEXT", "BLOB", "LONGTEXT", "LONGBLOB"] %}
                        <textarea cols="30" rows="10" class="input get_column_value">{{ (column_data[loop.index-1] | string ).replace("<", "&#60;").replace(">", "&#62;").replace('"', '&#34;') }}</textarea>
                        {% else %}
                        <input type="text" class="input get_column_value" value="{{ (column_data[loop.index-1] | string ).replace("<", "&#60;").replace(">", "&#62;").replace('"', '&#34;') }}">
                        {% endif %}
                    </td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </form>
    <button type="button" class="btn btnInsert" id="updateButton">Update</button>
</div>
<script>
    function _(elms) {
        return document.querySelectorAll(elms);
    }
    function _id(elm) {
        return document.getElementById(elm);
    }

    _id("updateButton").addEventListener("click", () => {
        let keys = [];
        let values = [];
        _(".get_column_data").forEach(element => {
            let column_name = element.getElementsByClassName("get_column_name")[0].innerText;
            let column_value = element.getElementsByClassName("get_column_value")[0].value;
            keys.push(column_name);
            values.push(column_value);
        })
        let set = "";
        let j = 0;
        let updateRow = false;
        for (let i = 0; i < keys.length; i++) {
                updateRow = true;
                let comma = "";
                if (j == 0) {
                    comma = "";
                }
                else {
                    comma = ",";
                }
                set += `${comma} \`${keys[i]}\` = '${values[i].replace("'", "&apos;")}'`;
                j++;
        }
        if (updateRow) {
            let sqlQuery = `UPDATE \`{{selected_table}}\` SET ${set} WHERE {{ key }} = '{{ index }}' `;
            let formData = new FormData();
            formData.append("query", sqlQuery);
            fetch("/~sql-executer", {
                method: "POST",
                body: formData
            }).then(response => response.json()).then(data => {
                if (data.status == "success") {
                    showAlert("Row updated successfully", "green");
                }
                else {
                    showAlert("Error: Can't update the row", "red");
                }
            }).catch(err => {
                if (err) {
                    showAlert("Error: Can't update the row", "red");
                }
            })
        }
    })
    _id("data-inserter-form").addEventListener("submit", (e) => {
        e.preventDefault();
    })

</script>
{% endblock %}